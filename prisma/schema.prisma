generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String?  @db.VarChar(60)
  verified  Boolean  @default(false)
  avatar    String   @db.VarChar(255)
  provider  Provider @default(LOCAL)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  companies CompanyMember[]
  comments  Comment[]
  companies CompanyMember[]
  likes     Like[]

  @@map("users")
}

model Company {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?
  email       String   @unique @db.VarChar(255)
  location    String   @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")

  users  CompanyMember[]
  events Event[]
  posts  Post[]

  @@map("companies")
}

model CompanyMember {
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int         @map("user_id")
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int         @map("company_id")
  role      CompanyRole @default(MEMBER)

  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, companyId])
  @@map("company_members")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String
  poster    String   @db.VarChar(255)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int      @map("company_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  likes Like[]

  @@map("posts")
}

model Like {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, postId])
  @@map("likes")
}

model Event {
  id                 Int                @id @default(autoincrement())
  title              String             @db.VarChar(255)
  description        String?
  format             Format
  theme              Theme
  visitorsVisibility VisitorsVisibility @default(EVERYONE) @map("visitors_visibillity")
  status             EventStatus        @default(DRAFT)
  location           String             @db.VarChar(255)
  ticketPrice        Decimal            @map("ticket_price") @db.Decimal(10, 2)
  ticketsQuantity    Int                @map("tickets_quantity")
  poster             String
  startDate          DateTime           @map("start_date")
  endDate            DateTime?          @map("end_date")
  publishDate        DateTime?          @map("publish_date")
  createdAt          DateTime           @default(now()) @map("created_at")
  company            Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId          Int                @map("company_id")

  comments Comment[]

  @@map("events")
}

model Comment {
  id       Int      @id @default(autoincrement())
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int      @map("author_id")
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  Int      @map("event_id")
  parent   Comment? @relation("ParentComment", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int?     @map("parent_id")
  content  String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  replies Comment[] @relation("ParentComment")

  @@map("comments")
}

enum Provider {
  LOCAL
  GOOGLE
}

enum CompanyRole {
  ADMIN
  MEMBER
}

enum Format {
  CONFERENCE
  LECTURE
  WORKSHOP
  FEST
  OTHER
}

enum Theme {
  BUSINESS
  POLITICS
  PSYCHOLOGY
  OTHER
}

enum VisitorsVisibility {
  EVERYONE
  VISITOR
}

enum EventStatus {
  DRAFT
  PUBLISHED
}
