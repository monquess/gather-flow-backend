generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int             @id @default(autoincrement())
  username  String          @unique @db.VarChar(255)
  email     String          @unique @db.VarChar(255)
  password  String?         @db.VarChar(60)
  verified  Boolean         @default(false)
  avatar    String
  provider  Provider        @default(LOCAL)
  companies CompanyMember[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Company {
  id          Int             @id @default(autoincrement())
  name        String          @db.VarChar(255)
  description String?
  email       String          @unique @db.VarChar(255)
  location    String          @db.VarChar(255)
  createdAt   DateTime        @default(now()) @map("created_at")
  users       CompanyMember[]
  events      Event[]

  @@map("companies")
}

model CompanyMember {
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int         @map("user_id")
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int         @map("company_id")
  role      CompanyRole @default(MEMBER)
  createdAt DateTime    @default(now()) @map("created_at")

  @@id([userId, companyId])
  @@map("company_members")
}

model Event {
  id                 Int                @id @default(autoincrement())
  title              String             @db.VarChar(255)
  description        String?
  format             Format
  theme              Theme
  location           String             @db.VarChar(255)
  ticketPrice        Decimal            @map("ticket_price") @db.Decimal(10, 2)
  ticketsQuantity    Int                @map("tickets_quantity")
  poster             String
  visitorsVisibility VisitorsVisibility @default(EVERYONE) @map("visitors_visibillity")
  startDate          DateTime           @map("start_date")
  endDate            DateTime?          @map("end_date")
  publishDate        DateTime?          @map("publish_date")
  createdAt          DateTime           @default(now()) @map("created_at")

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int     @map("company_id")

  @@map("events")
}

enum Provider {
  LOCAL
  GOOGLE
}

enum CompanyRole {
  ADMIN
  MEMBER
}

enum Format {
  CONFERENCE
  LECTURE
  WORKSHOP
  FEST
  OTHER
}

enum Theme {
  BUSINESS
  POLITICS
  PSYCHOLOGY
  OTHER
}

enum VisitorsVisibility {
  EVERYONE
  VISITOR
}
