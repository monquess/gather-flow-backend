generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String?  @db.VarChar(60)
  verified  Boolean  @default(false)
  avatar    String   @db.VarChar(255)
  provider  Provider @default(LOCAL)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  companies     CompanyMember[]
  comments      Comment[]
  likes         Like[]
  reviews       Review[]
  tickets       Ticket[]
  payments      Payment[]
  subscriptions CompanySubscription[]
  notifications Notification[]

  @@map("users")
}

model Company {
  id              Int      @id @default(autoincrement())
  name            String   @db.VarChar(255)
  description     String?
  email           String   @unique @db.VarChar(255)
  location        String   @db.VarChar(255)
  rating          Decimal  @default(0.0) @db.Decimal(2, 1)
  stripeAccountId String?  @map("stripe_account_id")
  createdAt       DateTime @default(now()) @map("created_at")

  users       CompanyMember[]
  events      Event[]
  posts       Post[]
  reviews     Review[]
  subscribers CompanySubscription[]

  @@map("companies")
}

model CompanyMember {
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int         @map("user_id")
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int         @map("company_id")
  role      CompanyRole @default(MEMBER)

  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, companyId])
  @@map("company_members")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String
  poster    String   @db.VarChar(255)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int      @map("company_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  likes Like[]

  @@map("posts")
}

model Like {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, postId])
  @@map("likes")
}

model Event {
  id                 Int                @id @default(autoincrement())
  title              String             @db.VarChar(255)
  description        String?
  format             Format
  theme              Theme
  visitorsVisibility VisitorsVisibility @default(EVERYONE) @map("visitors_visibillity")
  status             EventStatus        @default(DRAFT)
  location           String             @db.VarChar(255)
  ticketPrice        Decimal            @map("ticket_price") @db.Decimal(10, 2)
  ticketsQuantity    Int                @map("tickets_quantity")
  ticketsSold        Int                @default(0) @map("tickets_sold")
  poster             String
  startDate          DateTime           @map("start_date")
  endDate            DateTime?          @map("end_date")
  publishDate        DateTime?          @map("publish_date")
  createdAt          DateTime           @default(now()) @map("created_at")
  company            Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId          Int                @map("company_id")

  comments Comment[]

  tickets    Ticket[]
  promocodes Promocode[]

  @@map("events")
}

model Ticket {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int        @map("user_id")
  event        Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId      Int        @map("event_id")
  purchaseDate DateTime   @map("purchase_date")
  ticketCode   String     @map("ticket_code") @db.VarChar(255)
  promocode    Promocode? @relation(fields: [promocodeId], references: [id], onDelete: SetNull)
  promocodeId  Int?       @map("promocode_id")
  finalPrice   Decimal    @map("final_price") @db.Decimal(10, 2)
  createdAt    DateTime   @default(now()) @map("created_at")

  payments PaymentTicket[]

  @@map("tickets")
}

model Payment {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int           @map("user_id")
  status        PaymentStatus @default(PENDING)
  transactionId String        @map("transaction_id") @db.VarChar(255)
  createdAt     DateTime      @default(now()) @map("created_at")

  tickets PaymentTicket[]

  @@map("payments")
}

model PaymentTicket {
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId Int     @map("payment_id")
  ticket    Ticket  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  Int     @map("ticket_id")

  @@id([paymentId, ticketId])
  @@map("payment_tickets")
}

model Promocode {
  id             Int      @id @default(autoincrement())
  code           String   @db.VarChar(255)
  discount       Int
  event          Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId        Int      @map("event_id")
  isActive       Boolean  @default(true) @map("is_active")
  expirationDate DateTime @map("expiration_date")
  createdAt      DateTime @default(now()) @map("created_at")

  tickets Ticket[]

  @@unique([code, eventId])
  @@map("promocodes")
}

model Comment {
  id       Int      @id @default(autoincrement())
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int      @map("author_id")
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  Int      @map("event_id")
  parent   Comment? @relation("ParentComment", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int?     @map("parent_id")
  content  String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  replies Comment[] @relation("ParentComment")

  @@map("comments")
}

model Review {
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int     @map("author_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int     @map("company_id")
  stars     Int     @db.SmallInt
  comment   String? @db.VarChar(500)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([authorId, companyId])
  @@map("reviews")
}

model CompanySubscription {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int     @map("user_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int     @map("company_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, companyId])
  @@map("company_subscriptions")
}

model Notification {
  id      Int              @id @default(autoincrement())
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int              @map("user_id")
  message String           @db.Text
  isRead  Boolean          @default(false)
  type    NotificationType

  createdAt DateTime @default(now()) @map("created_at")

  @@map("notifications")
}

enum Provider {
  LOCAL
  GOOGLE
}

enum CompanyRole {
  ADMIN
  MEMBER
}

enum Format {
  CONFERENCE
  LECTURE
  WORKSHOP
  FEST
  OTHER
}

enum Theme {
  BUSINESS
  POLITICS
  PSYCHOLOGY
  OTHER
}

enum VisitorsVisibility {
  EVERYONE
  VISITOR
}

enum EventStatus {
  DRAFT
  PUBLISHED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum NotificationType {
  EVENT_REMINDER
  NEW_EVENT
  NEW_POST
  NEW_PROMOCODE
  NEW_ATTENDEE
}
